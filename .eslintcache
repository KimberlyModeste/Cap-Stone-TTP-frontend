[{"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/components/MenuBar.js":"1","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/pages/Home.js":"2","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/components/PostCard.js":"3","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/pages/UserPage.js":"4","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/components/PostForm.js":"5","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/pages/Login.js":"6","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/pages/Register.js":"7","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/App.js":"8","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/index.js":"9","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/redux/actions.js":"10","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/util/graphql.js":"11","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/context/auth.js":"12","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/redux/reducer.js":"13","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/ApolloProvider.js":"14","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/util/AuthRoute.js":"15"},{"size":1784,"mtime":1611611336758,"results":"16","hashOfConfig":"17"},{"size":2029,"mtime":1611612081364,"results":"18","hashOfConfig":"17"},{"size":2678,"mtime":1611612395596,"results":"19","hashOfConfig":"17"},{"size":4377,"mtime":1611608333913,"results":"20","hashOfConfig":"17"},{"size":2561,"mtime":1611608642850,"results":"21","hashOfConfig":"17"},{"size":2199,"mtime":1611608840672,"results":"22","hashOfConfig":"17"},{"size":3971,"mtime":1611608859261,"results":"23","hashOfConfig":"17"},{"size":1095,"mtime":1611610870945,"results":"24","hashOfConfig":"17"},{"size":195,"mtime":1611535388837,"results":"25","hashOfConfig":"17"},{"size":91,"mtime":1611507606068,"results":"26","hashOfConfig":"17"},{"size":347,"mtime":1611505308617,"results":"27","hashOfConfig":"17"},{"size":1273,"mtime":1611457472830,"results":"28","hashOfConfig":"17"},{"size":700,"mtime":1611612051492,"results":"29","hashOfConfig":"17"},{"size":885,"mtime":1611538888584,"results":"30","hashOfConfig":"17"},{"size":418,"mtime":1611588456975,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oeoght",{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/components/MenuBar.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/pages/Home.js",["67","68","69","70","71"],"import React, { useContext, useEffect } from 'react';\nimport axios from \"axios\";\n\nimport { useQuery } from '@apollo/client';\nimport { Grid,  Divider} from 'semantic-ui-react'\nimport { AuthContext } from '../context/auth';\nimport PostCard from '../components/PostCard';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport {connect} from 'react-redux'\nimport { SAVE_ALL_POSTS } from '../redux/actions';\nimport vid from \"../Pexels Videos 1204911.mp4\"\n\n\n\nlet Globalposts =[]\nlet weather ={}\n\n\nconst  Home = ({posts = [], save}) => {\n\n\n  const { user } = useContext(AuthContext);\n\n  \n  const {\n    loading,\n    data: { getPosts: postsFromDB } = {}\n    } = useQuery(FETCH_POSTS_QUERY);\n\n\n  useEffect(() => {\n\n    Globalposts = postsFromDB\n    save({type: SAVE_ALL_POSTS })\n\n\n  //   axios\n  //   .get(\n  //     \"http://api.airvisual.com/v2/nearest_city?key=a151e02a-8442-4f12-8b56-5a7bf4b9d8e1\"\n  //   )\n  //   .then((res) => weather = res.data)\n  //   .catch((err) => this.setState({ error: true }));\n    \n  \n  // console.log(\"weather data\",weather)\n  })\n\n\n  return (\n    <>\n    <div>\n      <video src ={vid} autoPlay loop muted/>\n      <Grid.Row className=\"page-title\">\n <h1 style={{margin:\"0 0 0 0 \"}}>Trending.....</h1>\n      </Grid.Row>\n      <Grid.Column centered columns={4}>\n        {loading ? (\n          <h1>Loading posts..</h1>\n        ) : ( \n          <div>\n            {\n              posts.map((post) => (\n                console.log(post),\n                <div key={post.id}  >\n                  <Grid>\n                  <PostCard post={post} />\n                  </Grid>\n                </div> \n              ) )}\n          </div>\n          \n        )}\n      </Grid.Column>\n    </div>\n    </>\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => (//console.log(\"state is: \",state),\n{\n  posts: state.posts\n});\nconst mapDispatchToProps = (dispatch) => { \n  return {\n     save: () => dispatch({ type:SAVE_ALL_POSTS, payload:Globalposts}),\n     }\n }\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/components/PostCard.js",["72","73","74","75"],"import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport {Button, Grid, Header, Divider, Image,Icon, Card, Label} from 'semantic-ui-react'\nimport { AuthContext } from '../context/auth';\n\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\nimport PopUp from '../util/PopUp';\nimport gql from 'graphql-tag';\n\n\n\n\nfunction PostCard({\n  post: {title, comments , body,img, createdAt, id, username, likeCount, commentCount, likes }\n}) {\n  const { user } = useContext(AuthContext);\n  return (\n    <>\n\n        <Card id = \"templates\" className = 'ui centered card'  style={{marginTop:\"2rem\",marginBottom:\"2rem\"}}>\n          <Card.Content>\n             <Image\n            floated='left'\n            size= 'tiny'\n            src={img}\n            circular\n            />\n            <Card.Header>{title}</Card.Header>\n            <Card.Header>{username}</Card.Header>\n            <Card.Meta as={Link} to={`/posts/${id}`}>\n              {moment(createdAt).fromNow(true)}\n            </Card.Meta>\n            <Card.Description>\n            <div>{body}</div>\n            </Card.Description>\n            <Card.Content extra>\n            <LikeButton user={user} post={{ id, likes, likeCount }} />\n            <PopUp content=\"Comment on post\">\n              <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n                <Button color=\"blue\" basic>\n                  <Icon name=\"comments\" />\n                </Button>\n                <Label basic color=\"blue\" pointing=\"left\">\n                  {commentCount}\n                </Label>\n              </Button>\n            </PopUp>\n            {user && user.username === username && <DeleteButton postId={id} />}\n\n          </Card.Content>\n          {comments.map((comment) => (\n              <Card fluid key={comment.id}>\n                <Card.Content>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={id} commentId={comment.id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n            </Card.Content>\n        </Card>\n    </>\n  );\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\n\nexport default PostCard;","/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/pages/UserPage.js",["76","77","78","79","80","81"],"import React, {useState, useContext, useEffect} from 'react'\nimport {Button, Grid, Header, Divider, Image,Icon, Card, Modal, Form, Container} from 'semantic-ui-react'\nimport '../App.css'\nimport { connect } from 'react-redux'\n\n\n\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport { SAVE_ALL_POSTS } from '../redux/actions';\n\nimport { useQuery } from '@apollo/client';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { AuthContext } from '../context/auth';\n\n\nlet Globalposts = []\nfunction UsersPage({posts = [], save}) {\n\n\n\n  const [open, setOpen] = useState(false)\n  const { user, logout } = useContext(AuthContext);\n\n\n  const {\n    loading,\n    data: { getPosts: postsFromDB } = {}\n    } = useQuery(FETCH_POSTS_QUERY);\n\n\n  useEffect(() => {\n\n    Globalposts = postsFromDB\n   \n    save({type: SAVE_ALL_POSTS })\n\n  })\n\n\nreturn (\n\n    <div>\n    <Header as='h2' icon textAlign='center'>\n        <Image src='https://www.kindpng.com/picc/m/285-2856724_user-avatar-enter-free-photo-user-avatar-green.png' circular />\n        <Header.Content>{user ? user.username : null}</Header.Content>\n    </Header>\n    <Grid>\n    <Grid.Column textAlign= 'center'>\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={\n        <Button \n        >Update Info</Button>}\n      >\n      <Modal.Header>Update Your Information</Modal.Header>\n      <Form /*onSubmit={onSubmit}*/ noValidate>\n        <Container textAlign= 'center' id =\"update\">\n        \n            <Form.Input\n                label =\"Username\"\n                placeholder = \"..\"\n                value = {user ? user.username : null} //make this username\n                type = \"text\"  \n             /> \n             <Form.Input\n                label =\"Email\"\n                placeholder = \"....\"\n                value = {user ? user.email : null} //make this email\n                type = \"text\"  \n             /> \n            <Form.Input\n                label =\"Password\"\n                placeholder = \"Password...\"\n                value = \"....\"  //make this password\n                type = \"password\"  \n             /> \n            <Form.Input\n                label =\"Confirm Password\"\n                placeholder = \"Confirm Password...\"\n                value = \"MollyMoo\" //make this the same as password\n                type = \"password\"  \n             /> \n        </Container>\n      </Form>\n      <Modal.Actions>\n        <Button color='black' onClick={() => setOpen(false)}>\n          No\n        </Button>\n        <Button\n          content=\"Yes\"\n          labelPosition='right'\n          icon='checkmark'\n          onClick={() => setOpen(false)}//make this actually update stuff\n          positive\n        />\n      </Modal.Actions>\n      \n    </Modal>\n    </Grid.Column> \n    </Grid>\n    <PostForm />\n    {/* <Divider section />\n    <Grid>\n    <Grid.Column textAlign= 'center'>\n      <Form>\n      <Form.Input \n      label=\"Title\"\n      placeholder=\"Enter a Title\"\n      name = \"title\"\n      type = \"text\"\n      />\n\n      <Form.Input \n      label=\"Topic\"\n      placeholder=\"Enter a Topic\"\n      name = \"topic\"\n      type = \"text\"\n      />\n\n      <Form.TextArea \n      label=\"Body\"\n      placeholder=\"\"\n      name = \"title\"\n      type = \"text\"\n      />\n\n      <Button \n      onClick={()=>{console.log(\"hi\")}}\n      animated\n      floated='right'\n      >\n      <Button.Content visible>Post</Button.Content>\n      <Button.Content hidden>\n      <Icon name='arrow right' />\n      </Button.Content>\n      </Button>\n      </Form>\n      </Grid.Column>\n      </Grid>\n\n    <Divider section /> */}\n\n\n    <Grid.Column centered columns={1}>   \n          <>\n            { \n              posts.map((post) => (\n                post.username === user.username ?\n                <div key={post.id}  >\n                  <Grid>\n                  <PostCard post={post} />\n                  </Grid>\n                </div> : null\n              )) \n           }\n          </> \n      </Grid.Column>\n     \n\n</div>\n)\n}   \n\n\nconst mapStateToProps = (state, ownProps) => (console.log(\"state is: \",state),{\n  posts: state.posts\n});\nconst mapDispatchToProps = (dispatch) => { \n  return {\n     save: () => dispatch({ type:SAVE_ALL_POSTS, payload:Globalposts}),\n     }\n }\n\n\nexport default connect (mapStateToProps,mapDispatchToProps)(UsersPage)",["82","83"],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/components/PostForm.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/pages/Login.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/pages/Register.js",[],["84","85"],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/App.js",["86"],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/index.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/redux/actions.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/util/graphql.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/context/auth.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/redux/reducer.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/ApolloProvider.js",[],"/Users/abdelrahmanelsayed/Desktop/projects/capstone-frontend/src/util/AuthRoute.js",[],{"ruleId":"87","severity":1,"message":"88","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":13},{"ruleId":"87","severity":1,"message":"91","line":5,"column":17,"nodeType":"89","messageId":"90","endLine":5,"endColumn":24},{"ruleId":"87","severity":1,"message":"92","line":16,"column":5,"nodeType":"89","messageId":"90","endLine":16,"endColumn":12},{"ruleId":"87","severity":1,"message":"93","line":22,"column":11,"nodeType":"89","messageId":"90","endLine":22,"endColumn":15},{"ruleId":"94","severity":1,"message":"95","line":63,"column":34,"nodeType":"96","messageId":"97","endLine":63,"endColumn":35},{"ruleId":"87","severity":1,"message":"98","line":4,"column":17,"nodeType":"89","messageId":"90","endLine":4,"endColumn":21},{"ruleId":"87","severity":1,"message":"99","line":4,"column":23,"nodeType":"89","messageId":"90","endLine":4,"endColumn":29},{"ruleId":"87","severity":1,"message":"91","line":4,"column":31,"nodeType":"89","messageId":"90","endLine":4,"endColumn":38},{"ruleId":"87","severity":1,"message":"100","line":71,"column":7,"nodeType":"89","messageId":"90","endLine":71,"endColumn":30},{"ruleId":"87","severity":1,"message":"91","line":2,"column":31,"nodeType":"89","messageId":"90","endLine":2,"endColumn":38},{"ruleId":"87","severity":1,"message":"101","line":2,"column":46,"nodeType":"89","messageId":"90","endLine":2,"endColumn":50},{"ruleId":"87","severity":1,"message":"102","line":2,"column":52,"nodeType":"89","messageId":"90","endLine":2,"endColumn":56},{"ruleId":"87","severity":1,"message":"103","line":23,"column":17,"nodeType":"89","messageId":"90","endLine":23,"endColumn":23},{"ruleId":"87","severity":1,"message":"104","line":27,"column":5,"nodeType":"89","messageId":"90","endLine":27,"endColumn":12},{"ruleId":"94","severity":1,"message":"95","line":168,"column":78,"nodeType":"96","messageId":"97","endLine":168,"endColumn":79},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"105","replacedBy":"109"},{"ruleId":"107","replacedBy":"110"},{"ruleId":"87","severity":1,"message":"111","line":2,"column":17,"nodeType":"89","messageId":"90","endLine":2,"endColumn":27},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'weather' is assigned a value but never used.","'user' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Grid' is defined but never used.","'Header' is defined but never used.","'SUBMIT_COMMENT_MUTATION' is assigned a value but never used.","'Icon' is defined but never used.","'Card' is defined but never used.","'logout' is assigned a value but never used.","'loading' is assigned a value but never used.","no-native-reassign",["112"],"no-negated-in-lhs",["113"],["112"],["113"],"'useContext' is defined but never used.","no-global-assign","no-unsafe-negation"]